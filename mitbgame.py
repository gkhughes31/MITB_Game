import pygame
import random
import math
import button

# group containing the wrestlers in the two matches
male_wrestlers = ("LA Knight","Shinsuke Nakamura","Butch","Ricochet","Santos Escobar","Damien Priest","Logan Paul", "The Field M")
female_wrestlers = ("Becky Lynch","Zelina Vega", "Zoey Stark", "Bayley", "Iyo Sky", "Trish Stratus", "The Field W")


# Set default image size
default_image_size = (100,50)

# Initialize Pygame
pygame.init()

# Set up the window dimensions
window = pygame.display.set_mode((0,0), pygame.FULLSCREEN)
w, h = pygame.display.get_surface().get_size()
pygame.display.set_caption("Money in the Bank Game")
pygame_icon = pygame.image.load("wwe belt.png")
pygame.display.set_icon(pygame_icon)

# Define Wrestler objects
class Wrestler:   
    def __init__(self, wname, wgender, wnumber):
        self.wname = wname.replace("_"," ")
        self.wgender = wgender
        self.wnumber = wnumber
        self.wrestler_x = (self.wnumber-1)%4+1
        self.wrestler_y = math.ceil(self.wnumber/4)
        self.image = pygame.image.load(self.wname + ".png")
        self.rect = self.image.get_rect()
        self.winner = False
        self.winnerbutton = ""
        self.bettors = []    
    
    def __str__(self):
        return self.wname + " is " + self.wgender

#Define Player objects
class Player:    
    def __init__(self, pname, initials, color, pnumber):
        self.pname = pname
        self.initials = initials
        self.color = color
        self.pnumber = pnumber
        self.wrestler = ""
        self.points = 0
        self.moves = 0
        self.position_x= 0
        self.position_y= 0
        self.choice = False
        self.yesbutton = ""
        self.nobutton = ""
    
    def __str__(self):
        return self.pname + " has " + str(self.points) + " points"

#   Global variables for timer
clock = pygame.time.Clock()

#Define "Game" object
class MITB:
    def __init__(self):
        self.wrestlers = {}
        self.players_list = []
        self.players = {}
        self.gender = "male"
        self.game_state = "title"
        self.timer = 120
        self.current_time = 0
        self.button_press_time = 0
        self.screen_color = (192,192,192)
        self.number_of_players =""
        self.player_number = 1
        self.round_counter = 0
        
    # Makes a Wrestler object for each element in the two groupings
    def make_game(self):   
        for count, wrestler in enumerate(male_wrestlers, start = 1):
            name = wrestler
            self.wrestlers[name] = self.wrestlers.get(name, Wrestler(wname = name, wgender ="male", wnumber = count))
        for count, wrestler in enumerate(female_wrestlers, start = 1):
            name = wrestler
            self.wrestlers[name] = self.wrestlers.get(name, Wrestler(wname = name, wgender ="female", wnumber = count))        
    
    # Pulls solo element in the players_list (generated by text entry) and creates a Player object
    def player_info_entry(self):   
        pname = self.players_list[0]
        name = self.players_list[0] + str(self.player_number)
        initials = self.players_list[0][0] + str(self.player_number)
        color = random.choices(range(256), k=3)
        self.players[name] = self.players.get(name, Player(pname = pname, initials = initials, color =  color, pnumber = mitb.player_number))
        self.player_number += 1

                
    def assign_initial_wrestler(self): 
        initialbank = []
        for wrestler in self.wrestlers:
            if self.wrestlers[wrestler].wgender == self.gender:
                initialbank.append(self.wrestlers[wrestler])
        for player in self.players:
            self.players[player].wrestler = ""
            self.players[player].wrestler = random.choice(initialbank)
            selection = self.players[player].wrestler.wname
            self.wrestlers[selection].bettors.append(self.players[player])
            
    def move_choice(self):
        for player in self.players:
            if self.players[player].choice == True:
                current = self.players[player].wrestler.wname
                self.wrestlers[current].bettors.remove(self.players[player])
                self.players[player].points +=1
                secondbank = []
                for wrestler in self.wrestlers:
                    if self.wrestlers[wrestler].wgender == self.gender and self.players[player].wrestler != self.wrestlers[wrestler].wname:
                        secondbank.append(self.wrestlers[wrestler])
                self.players[player].wrestler = random.choice(secondbank)
                selection = self.players[player].wrestler.wname
                self.wrestlers[selection].bettors.append(self.players[player])
                mitb.players[player].choice = False
    
    def winner_award(self):
        for wrestler in self.wrestlers:
            if self.wrestlers[wrestler].winner:
                winner = self.wrestlers[wrestler]
                for player in winner.bettors:
                    player.points += 10
                winner.winner = False
            self.wrestlers[wrestler].bettors = []
                

def draw_centered_text(screen1, x, y, text, fontstyle, color):
    words = fontstyle.render(text, True, color)
    rectangle = words.get_rect(center=(x,y))
    screen1.blit(words, rectangle)

def draw_circle(screen, x, y, text, color, fontstyle):
    pygame.draw.circle(screen, color, (x,y), 25)
    pygame.draw.circle(screen, black, (x,y), 25, width= 2)
    words = fontstyle.render(text, True, black)
    rectangle = words.get_rect(center=(x,y))
    screen.blit(words, rectangle)

def draw_centered_picture(screen, x, y, image, scalex, scaley):
    image = pygame.transform.smoothscale(image, (scalex,scaley))
    image_rect = image.get_rect()
    image_rect.center = ((x,y))
    window.blit(image, image_rect)
    
# Create MITB instance        
mitb = MITB()

# load general images
title_img = pygame.image.load("title.jpg")

#load button images
start_button_img = pygame.image.load("wwe belt.png")
mens_button_img = pygame.image.load("mens mitb.jpg")
womens_button_img = pygame.image.load("womens mitb.jpg")
yes_button_img = pygame.image.load("yesbutton.png")
no_button_img = pygame.image.load("nobutton.png")
briefcase_img = pygame.image.load("briefcase.png")

# Create button instances
start_game_button = button.Button(w/2, .92*h, start_button_img, .3)
mens_button = button.Button(1/3*w, .92*h, mens_button_img, .1)
womens_button = button.Button(2/3*w, .92*h, womens_button_img, .1)
briefcase_button = button.Button(7/8*w, .92*h, briefcase_img, .1)

# Set up the font for labels
font = pygame.font.SysFont('Georgia', 38, bold=True)
font_subtitle = pygame.font.SysFont('Georgia', 25, bold=True)
font_num = pygame.font.SysFont('Helvetica',50,bold =True)
font_title = pygame.font.SysFont('Georgia', 75 ,bold=True)
font_chip = pygame.font.SysFont('Helvetica', 25, bold=True)

# Set up colors
black = (0, 0, 0)
white = (255, 255, 255)
blue =  (  0,   0, 255)
green = (  0, 255,   0)
red =   (255,   0,   0)

# Define FPS
FPS = 30

        

# Game loop
def main():
    run = True
    while run:
        if mitb.game_state == "title":
            window.fill(mitb.screen_color)
            draw_centered_text(window, w/2, h*.1, "Money in the Bank Game", font_title, black)
            draw_centered_picture(window, w/2, h/2, title_img, .9*w, .7*h)
            if start_game_button.draw(window):
                mitb.make_game()
                mitb.game_state = "player_entry"

        # player info entry screen
        elif mitb.game_state == "player_entry":
            window.fill(mitb.screen_color)
            draw_centered_text(window, w/2, h*.05, "Player Info", font_title, black)
            # draw_centered_text(window, w/3, h*.2, "Type names of players followed by enter:", font_num, black)
            instructions = font_num.render("Type names of players followed by enter:", True, black)
            instructions_rect = instructions.get_rect()
            window.blit(instructions, (0+20, h*.2))
            input_rect = pygame.Rect(9/16*w, h*.2, 5/16*w, instructions.get_height())
            pygame.draw.rect(window, black, input_rect, 2)
            text_surface = font_num.render(mitb.number_of_players, True, black)
            window.blit(text_surface, (9/16*w+5,h*.2))
            draw_centered_text(window, 1/3*w, .82*h, "Start Men's", font_subtitle, black)
            draw_centered_text(window, 2/3*w, .82*h, "Start Women's", font_subtitle, black)
            # put name on screen after entry
            for player in mitb.players:
                player_img = font.render(mitb.players[player].pname + " " + str(mitb.players[player].pnumber), True, mitb.players[player].color)
                player_index = mitb.players[player].pnumber -1
                window.blit(player_img, ((player_index%5)*.2*w+20, (math.ceil(mitb.players[player].pnumber/5)+1)*h*.15))
            if mens_button.draw(window):
                mitb.gender = "male"
                mitb.assign_initial_wrestler()
                mitb.game_state = "main_game"
            if womens_button.draw(window):
                mitb.gender = "female"
                mitb.assign_initial_wrestler()
                mitb.game_state = "main_game"
                                
        elif mitb.game_state == "main_game":
            # Clear the screen
            mitb.screen_color = (192,192,192)
            window.fill(mitb.screen_color)
            # Draw the wrestler icons and labels
            for wrestler in mitb.wrestlers:
                if mitb.wrestlers[wrestler].wgender == mitb.gender:
                    wrestler_icon = mitb.wrestlers[wrestler].image.convert_alpha()
                    wrestler_icon = pygame.transform.smoothscale(wrestler_icon, (.25*w,.25*h))
                    wrestler_rect = wrestler_icon.get_rect()
                    wrestler_rect.center = (mitb.wrestlers[wrestler].wrestler_x*1/5*w+(mitb.wrestlers[wrestler].wrestler_x*40-80), 
                                            mitb.wrestlers[wrestler].wrestler_y*1/3*h+(mitb.wrestlers[wrestler].wrestler_y-1)*40)
                    window.blit(wrestler_icon, wrestler_rect)
                    wrestler_title = font.render(mitb.wrestlers[wrestler].wname, True, black)
                    wrestler_rectangle = wrestler_title.get_rect(center=(mitb.wrestlers[wrestler].wrestler_x*1/5*w+(mitb.wrestlers[wrestler].wrestler_x*40-80),
                                                                         (mitb.wrestlers[wrestler].wrestler_y*1/3*h+(mitb.wrestlers[wrestler].wrestler_y-1)*40)-100))
                    window.blit(wrestler_title, wrestler_rectangle)
            # put player chips on cooresponding wrestlers
            for wrestler in mitb.wrestlers:
                for i, val in enumerate(mitb.wrestlers[wrestler].bettors):
                    draw_circle(window, 
                                mitb.wrestlers[wrestler].wrestler_x*1/5*w+(mitb.wrestlers[wrestler].wrestler_x*40-80)-55+(i%3)*55, 
                                ((mitb.wrestlers[wrestler].wrestler_y*1/3*h+(mitb.wrestlers[wrestler].wrestler_y-1)*40)+40)+math.floor(i/3)*55, 
                                val.initials, 
                                val.color, 
                                font_chip)        
            if mitb.button_press_time != 0 and mitb.timer>0:
                mitb.screen_color = (192,192,192)
                mitb.timer = 90-(mitb.current_time-mitb.button_press_time)
                display_timer = font_num.render(str(mitb.timer), True, black)
                display_timer_rect = display_timer.get_rect()
                display_timer_rect.center = (w/2, .07*h)
                window.blit(display_timer, display_timer_rect)
            elif mitb.timer<=0:
                mitb.game_state = "move_choice"
            if briefcase_button.draw(window):
                mitb.game_state = "winner_select"
            
        
        elif mitb.game_state == "move_choice":
            mitb.screen_color = black
            window.fill(mitb.screen_color)
            # pygame.draw.rect(window, black, [1/4*w, 0, 1/2*w, h])
            for player in mitb.players:
                draw_centered_text(window, 1/2*w, int(mitb.players[player].pnumber)*h/(len(mitb.players)+3), mitb.players[player].pname + str(mitb.players[player].pnumber) + " is on " + mitb.players[player].wrestler.wname, font, white)
                mitb.players[player].yesbutton = button.Button(3/4*w, int(mitb.players[player].pnumber)*h/(len(mitb.players)+3), yes_button_img, .04)
                mitb.players[player].nobutton = button.Button(3/4*w + 75, int(mitb.players[player].pnumber)*h/(len(mitb.players)+3), no_button_img, .04)
                if mitb.players[player].choice == True:
                    choice_text = "yes"
                else:
                    choice_text = "no"
                draw_centered_text(window, .85*w, int(mitb.players[player].pnumber)*h/(len(mitb.players)+3), choice_text, font, white)
                if mitb.players[player].yesbutton.draw(window):
                    mitb.players[player].choice = True
                if mitb.players[player].nobutton.draw(window):
                    mitb.players[player].choice = False
            if start_game_button.draw(window):
                mitb.move_choice()
                mitb.timer = 120
                mitb.button_press_time = int(math.floor(pygame.time.get_ticks()/1000))
                mitb.game_state = "main_game"
        
        elif mitb.game_state == "winner_select":
            window.fill(mitb.screen_color)
            for wrestler in mitb.wrestlers:
                if mitb.wrestlers[wrestler].wgender == mitb.gender:
                    wrestler_icon = mitb.wrestlers[wrestler].image.convert_alpha()
                    wrestler_icon = pygame.transform.smoothscale(wrestler_icon, (.25*w,.25*h))
                    wrestler_rect = wrestler_icon.get_rect()
                    wrestler_rect.center = (mitb.wrestlers[wrestler].wrestler_x*1/5*w+(mitb.wrestlers[wrestler].wrestler_x*40-80), 
                                            mitb.wrestlers[wrestler].wrestler_y*1/3*h+(mitb.wrestlers[wrestler].wrestler_y-1)*40)
                    window.blit(wrestler_icon, wrestler_rect)
                    wrestler_title = font.render(mitb.wrestlers[wrestler].wname, True, black)
                    wrestler_rectangle = wrestler_title.get_rect(center=(mitb.wrestlers[wrestler].wrestler_x*1/5*w+(mitb.wrestlers[wrestler].wrestler_x*40-80),
                                                                         (mitb.wrestlers[wrestler].wrestler_y*1/3*h+(mitb.wrestlers[wrestler].wrestler_y-1)*40)-100))
                    window.blit(wrestler_title, wrestler_rectangle)
            
                    mitb.wrestlers[wrestler].winnerbutton = button.Button(mitb.wrestlers[wrestler].wrestler_x*1/5*w+(mitb.wrestlers[wrestler].wrestler_x*40-80),
                                                                     (mitb.wrestlers[wrestler].wrestler_y*1/3*h+(mitb.wrestlers[wrestler].wrestler_y-1)*40)+50,
                                                                     briefcase_img, .1)
                    if mitb.wrestlers[wrestler].winnerbutton.draw(window):
                        mitb.wrestlers[wrestler].winner = True
                        winner_checkbox = yes_button_img.convert_alpha()
                        winner_checkbox = pygame.transform.smoothscale(winner_checkbox, (40,40))
                        winner_rect = winner_checkbox.get_rect(center = (mitb.wrestlers[wrestler].wrestler_x*1/5*w+(mitb.wrestlers[wrestler].wrestler_x*40-80),
                                                                          (mitb.wrestlers[wrestler].wrestler_y*1/3*h+(mitb.wrestlers[wrestler].wrestler_y-1)*40)+50))
                        window.blit(winner_checkbox, winner_rect)
                        mitb.winner_award()
                        mitb.round_counter += 1
                        if mitb.round_counter <2:
                            mitb.game_state = "score_update"
                        else:
                            mitb.game_state = "final_score"                                               
                    
        elif mitb.game_state == "score_update":
            mitb.screen_color = black
            window.fill(mitb.screen_color)
            playerscore_list = list((mitb.players[player].pname, mitb.players[player].points, mitb.players[player].pnumber) for player in mitb.players)
            playerscore_list.sort(key=lambda a: a[1], reverse=True)
            for i, (player,score,pnumber) in enumerate(playerscore_list):
                draw_centered_text(window, 1/2*w, int(i+1)*h/(len(playerscore_list)+3), str(i+1) + ". " + player + " " + str(pnumber) + " : " + str(score), font, white)
            if start_game_button.draw(window):
                if mitb.gender == "female":
                    mitb.gender = "male"
                else:
                    mitb.gender = "female"
                mitb.assign_initial_wrestler()
                mitb.timer = 120
                mitb.button_press_time = int(math.floor(pygame.time.get_ticks()/1000))
                mitb.game_state = "main_game"
        
        elif mitb.game_state == "final_score":
            mitb.screen_color = black
            window.fill(mitb.screen_color)
            playerscore_list = list((mitb.players[player].pname, mitb.players[player].points, mitb.players[player].pnumber) for player in mitb.players)
            playerscore_list.sort(key=lambda a: a[1], reverse=True)
            for i, (player,score,pnumber) in enumerate(playerscore_list):
                draw_centered_text(window, 1/2*w, int(i+1)*h/(len(playerscore_list)+3), str(i+1) + ". " + player + " " + str(pnumber) + " : " + str(score), font, white)
        
        elif mitb.game_state == "rules":
            pass
        
        # Sets clocked framerate
        clock.tick(FPS)
        # Handle events
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    run = False
                if mitb.game_state == "player_entry" and event.key == pygame.K_BACKSPACE:
                    mitb.number_of_players = mitb.number_of_players[:-1]
                if mitb.game_state == "player_entry" and event.key == pygame.K_RETURN and mitb.number_of_players != "":
                    mitb.players_list.append(mitb.number_of_players)
                    mitb.player_info_entry()
                    mitb.number_of_players = ""
                    mitb.players_list = []
                if mitb.game_state == "player_entry" and event.key != pygame.K_BACKSPACE and event.key != pygame.K_RETURN:
                    mitb.number_of_players += event.unicode
                if mitb.game_state == "main_game" and event.key == pygame.K_SPACE:
                    mitb.button_press_time = int(math.floor(pygame.time.get_ticks()/1000))
                    mitb.timer = 1

        # Update the display
        pygame.display.flip()

        mitb.current_time = int(math.floor(pygame.time.get_ticks()/1000))
    
    # Quit the game
    pygame.quit()

if __name__ == "__main__":
    main()
